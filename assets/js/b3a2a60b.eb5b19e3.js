"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3815],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>h});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),p=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},u=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=p(r),f=a,h=d["".concat(s,".").concat(f)]||d[f]||c[f]||i;return r?n.createElement(h,o(o({ref:t},u),{},{components:r})):n.createElement(h,o({ref:t},u))}));function h(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=f;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:a,o[1]=l;for(var p=2;p<i;p++)o[p]=r[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},1272:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var n=r(7462),a=(r(7294),r(3905));const i={sidebar_position:0},o="OVR Hand Input Data Provider",l={unversionedId:"platforms/Oculus/ovr-hand-input-data-provider",id:"platforms/Oculus/ovr-hand-input-data-provider",title:"OVR Hand Input Data Provider",description:"-\tHandInputDataProvider derived script that handles the hand tracking based input specific for Oculus platform",source:"@site/docs/platforms/Oculus/ovr-hand-input-data-provider.md",sourceDirName:"platforms/Oculus",slug:"/platforms/Oculus/ovr-hand-input-data-provider",permalink:"/docs/platforms/Oculus/ovr-hand-input-data-provider",draft:!1,tags:[],version:"current",sidebarPosition:0,frontMatter:{sidebar_position:0},sidebar:"defaultSidebar",previous:{title:"Oculus",permalink:"/docs/category/oculus"},next:{title:"Hand Pose Detection",permalink:"/docs/category/hand-pose-detection"}},s={},p=[{value:"Public properties",id:"public-properties",level:3},{value:"Protected methods",id:"protected-methods",level:3}],u={toc:p};function d(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"ovr-hand-input-data-provider"},"OVR Hand Input Data Provider"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"HandInputDataProvider derived script that handles the hand tracking based input specific for Oculus platform"),(0,a.kt)("li",{parentName:"ul"},"Reads the hand tracking data using Oculus' API and sets the input state defined in OVRHandInputDataProvider's base behaviours"),(0,a.kt)("li",{parentName:"ul"},"It is a good idea to set the InputRoot property inherited from InputDataProvider to OVRCameraRig's Transform if one is in use in a given scene. That way if the camera rig object gets moved (like it is in teleport functionality for example) all of the hand-representing objects that use OVRHandInputDataProvider will move with it properly\nMembers defined in this script are:")),(0,a.kt)("h3",{id:"public-properties"},"Public properties"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"HandType HandType { get; set; }\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Specifies for which hand is input being provided by this script, left or right")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"HandSkeletonPose BindPose { get; set; }\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"HandSkeletonPose is a scriptable object that stores the poses (positions and rotations) of each of the hand skeleton bones. BindPose property specifies the default pose for a hand skeleton which can be viewed as the pose for a hand skeleton at rest"),(0,a.kt)("li",{parentName:"ul"},"This property is optional, OVRHandInputDataProvider will use poses obtained from the Oculus Integration package's default skeleton if nothing is assigned"),(0,a.kt)("li",{parentName:"ul"},"OctoXR base package includes HandSkeletonPose assets, one for the left and one for the right hand, so there is no need to manually create one except if there is a need for more custom hands to be used")),(0,a.kt)("h3",{id:"protected-methods"},"Protected methods"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"virtual void Awake()\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Unity built-in callback. Performs certain initialization logic for the OVRHandInputDataProvider")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"virtual void Start()\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Unity built-in callback. Performs certain initialization logic for the OVRHandInputDataProvider")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"virtual void Update()\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Unity built-in callback. Updates the input state in order to provide the fresh input information for rendering related logic")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"virtual void FixedUpdate\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Unity built-in callback. Updates the input state in order to provide the fresh input information for physics related logic\nHopefully it goes without saying that base implementations of these methods should always be called in their respective override methods in order to ensure the correct behaviour of this script.")))}d.isMDXComponent=!0}}]);