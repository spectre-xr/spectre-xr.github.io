"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1789],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>b});var n=r(7294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var l=n.createContext({}),s=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},u=function(e){var t=s(e.components);return n.createElement(l.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),p=s(r),d=i,b=p["".concat(l,".").concat(d)]||p[d]||m[d]||o;return r?n.createElement(b,a(a({ref:t},u),{},{components:r})):n.createElement(b,a({ref:t},u))}));function b(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=r.length,a=new Array(o);a[0]=d;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c[p]="string"==typeof e?e:i,a[1]=c;for(var s=2;s<o;s++)a[s]=r[s];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},2804:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>c,toc:()=>s});var n=r(7462),i=(r(7294),r(3905));const o={sidebar_position:4},a="VelocityEstimator",c={unversionedId:"interactions/scripting/interactions/velocity-estimator",id:"interactions/scripting/interactions/velocity-estimator",title:"VelocityEstimator",description:"Used to estimate release velocities of grabbable objects, without it, the objects would behave as if no external forces are impacting them (excluding the non-precision joint grabbable) on throw",source:"@site/docs/interactions/scripting/interactions/velocity-estimator.md",sourceDirName:"interactions/scripting/interactions",slug:"/interactions/scripting/interactions/velocity-estimator",permalink:"/docs/interactions/scripting/interactions/velocity-estimator",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/interactions/scripting/interactions/velocity-estimator.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"GrabPoint",permalink:"/docs/interactions/scripting/interactions/grab-point"},next:{title:"HandPosing",permalink:"/docs/category/handposing"}},l={},s=[{value:"Public methods",id:"public-methods",level:3}],u={toc:s};function p(e){let{components:t,...r}=e;return(0,i.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"velocityestimator"},"VelocityEstimator"),(0,i.kt)("p",null,"Used to estimate release velocities of grabbable objects, without it, the objects would behave as if no external forces are impacting them (excluding the non-precision joint grabbable) on throw"),(0,i.kt)("h3",{id:"public-methods"},"Public methods"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"void StartVelocityEstimation()\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"ends any previous velocity estimation"),(0,i.kt)("li",{parentName:"ul"},"starts a coroutine which calculates linear and angular velocities")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"void FinishVelocityEstimation()\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"stops the coroutine - called in the previously mentioned method")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"Vector3 GetLinearVelocityAverage()\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"gets the linear velocity average or the average rate at which the object should be moved according to the velocity calculation coroutine started upon grabbing it")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"Vector3 GetAngularVelocityAverage()\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"gets the angular velocity average or the average rate at which the object should be rotated according to the velocity calculation coroutine started upon grabbing it")))}p.isMDXComponent=!0}}]);