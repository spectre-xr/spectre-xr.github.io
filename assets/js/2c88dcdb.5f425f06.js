"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1218],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>b});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),c=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},u=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=c(a),h=r,b=d["".concat(s,".").concat(h)]||d[h]||p[h]||l;return a?n.createElement(b,i(i({ref:t},u),{},{components:a})):n.createElement(b,i({ref:t},u))}));function b(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=h;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[d]="string"==typeof e?e:r,i[1]=o;for(var c=2;c<l;c++)i[c]=a[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}h.displayName="MDXCreateElement"},5162:(e,t,a)=>{a.d(t,{Z:()=>i});var n=a(7294),r=a(6010);const l="tabItem_Ymn6";function i(e){let{children:t,hidden:a,className:i}=e;return n.createElement("div",{role:"tabpanel",className:(0,r.Z)(l,i),hidden:a},t)}},5488:(e,t,a)=>{a.d(t,{Z:()=>h});var n=a(7462),r=a(7294),l=a(6010),i=a(2389),o=a(7392),s=a(7094),c=a(2466);const u="tabList__CuJ",d="tabItem_LNqP";function p(e){const{lazy:t,block:a,defaultValue:i,values:p,groupId:h,className:b}=e,m=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),k=p??m.map((e=>{let{props:{value:t,label:a,attributes:n}}=e;return{value:t,label:a,attributes:n}})),f=(0,o.l)(k,((e,t)=>e.value===t.value));if(f.length>0)throw new Error(`Docusaurus error: Duplicate values "${f.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const g=null===i?i:i??m.find((e=>e.props.default))?.props.value??m[0].props.value;if(null!==g&&!k.some((e=>e.value===g)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${g}" but none of its children has the corresponding value. Available values are: ${k.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:v,setTabGroupChoices:y}=(0,s.U)(),[N,w]=(0,r.useState)(g),j=[],{blockElementScrollPositionUntilNextRender:I}=(0,c.o5)();if(null!=h){const e=v[h];null!=e&&e!==N&&k.some((t=>t.value===e))&&w(e)}const x=e=>{const t=e.currentTarget,a=j.indexOf(t),n=k[a].value;n!==N&&(I(t),w(n),null!=h&&y(h,String(n)))},O=e=>{let t=null;switch(e.key){case"Enter":x(e);break;case"ArrowRight":{const a=j.indexOf(e.currentTarget)+1;t=j[a]??j[0];break}case"ArrowLeft":{const a=j.indexOf(e.currentTarget)-1;t=j[a]??j[j.length-1];break}}t?.focus()};return r.createElement("div",{className:(0,l.Z)("tabs-container",u)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":a},b)},k.map((e=>{let{value:t,label:a,attributes:i}=e;return r.createElement("li",(0,n.Z)({role:"tab",tabIndex:N===t?0:-1,"aria-selected":N===t,key:t,ref:e=>j.push(e),onKeyDown:O,onClick:x},i,{className:(0,l.Z)("tabs__item",d,i?.className,{"tabs__item--active":N===t})}),a??t)}))),t?(0,r.cloneElement)(m.filter((e=>e.props.value===N))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},m.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==N})))))}function h(e){const t=(0,i.Z)();return r.createElement(p,(0,n.Z)({key:String(t)},e))}},7983:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>u,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>c,toc:()=>d});var n=a(7462),r=(a(7294),a(3905)),l=a(5488),i=a(5162);const o={sidebar_position:1},s="InteractionHand",c={unversionedId:"interactions/scripting/interactions/interaction-hand",id:"interactions/scripting/interactions/interaction-hand",title:"InteractionHand",description:"",source:"@site/docs/interactions/scripting/interactions/interaction-hand.md",sourceDirName:"interactions/scripting/interactions",slug:"/interactions/scripting/interactions/interaction-hand",permalink:"/docs/interactions/scripting/interactions/interaction-hand",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/interactions/scripting/interactions/interaction-hand.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Interactions",permalink:"/docs/category/interactions-1"},next:{title:"Grabbable",permalink:"/docs/interactions/scripting/interactions/grabbable"}},u={},d=[{value:"Public properties",id:"public-properties",level:4},{value:"Public methods",id:"public-methods",level:4},{value:"Implementations",id:"implementations",level:3}],p={toc:d};function h(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"interactionhand"},"InteractionHand"),(0,r.kt)("p",null,"Abstract class that inherits from the MonoBehaviour and implements the IInteractor interface. The class is responsible for detecting the current input method used by the player (hand tracking or controllers) and switching between them during runtime. The class contains functionality for detecting and processing the player's interactions with objects in the game, such as grabbing and releasing objects. It also contains functionality responsible for finding the closest grabbable objects and grab points."),(0,r.kt)("h4",{id:"public-properties"},"Public properties"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"LayerMask LayerMask\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"List<Grabbable> ObjectsInReach\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"List<GrabPoint> GrabPointsInReach\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"GrabPoint ClosestGrabPoint\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"Grabbable ClosestObject\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"Transform PalmCenter\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"Transform TrackingSpace\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"HandSkeleton HandSkeleton\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"bool ShouldGrab\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"bool IsGrabbing\n")),(0,r.kt)("h4",{id:"public-methods"},"Public methods"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"void DetectGrab()\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"virtual void ProcessGrab()\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"virtual void GrabCheck()\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"virtual void StartInteraction()\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"virtual void UpdateInteraction()\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"virtual void EndInteraction()\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"void AddGrabPoint(Collider grabPointCollider)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"void AddGrabbableObject(Collider grabbableCollider)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"void RemoveGrabPoint(GrabPoint[] grabPoints)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"void RemoveGrabbableObject(Grabbable grabbable)\n")),(0,r.kt)("h3",{id:"implementations"},"Implementations"),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"proximityinteractionhand",label:"ProximityInteractionHand",default:!0,mdxType:"TabItem"},"Used to handle interactions with objects within a certain proximity of the hand. It inherits from the InteractionHand class and overrides its StartInteraction and EndInteraction methods.",(0,r.kt)("br",null),(0,r.kt)("br",null),(0,r.kt)("h2",null,"Public Methods"),(0,r.kt)("code",null,"override void StartInteraction()"),(0,r.kt)("li",null,"calls the base StartInteraction method"),(0,r.kt)("li",null,"checks for any colliders within a sphere with a certain radius around the hand's position using the ContactCheck method"),(0,r.kt)("li",null,"calls UpdateInteraction() if any colliders are found "),(0,r.kt)("br",null),(0,r.kt)("code",null,"override void EndInteraction()"),(0,r.kt)("li",null,"calls the base EndInteraction method"),(0,r.kt)("li",null,"calls CheckForRelease()"),(0,r.kt)("br",null),(0,r.kt)("code",null,"virtual Collider[] ContactCheck()"),(0,r.kt)("li",null,"uses Unity's OverlapSphere method to check for colliders within the sphere, passing in the hand's position, the radius of the sphere, and the LayerMask for filtering the colliders"),(0,r.kt)("li",null,"stores the result of the check in the contactResult variable, which is an array of colliders that were hit by the sphere"),(0,r.kt)("li",null,"returns the contactResult variable; an array of colliders that were hit by the sphere")),(0,r.kt)(i.Z,{value:"distanceinteractionhand",label:"DistanceInteractionHand",mdxType:"TabItem"},"Used to handle interactions with objects within a certain distance of the hand. It inherits from the InteractionHand class and overrides its StartInteraction and ProcessGrab methods.",(0,r.kt)("br",null),(0,r.kt)("br",null),(0,r.kt)("h2",null,"Public Methods"),(0,r.kt)("code",null,"override void StartInteraction()"),(0,r.kt)("li",null,"first calls the base class's StartInteraction method, then it calls the UpdateInteraction method"),(0,r.kt)("br",null),(0,r.kt)("code",null,"override void ProcessGrab()"),(0,r.kt)("li",null,"calls the FindClosestGrabbable method which checks if there is any Grabbable object within the raycast distance, if it finds one it sets it as closestObject "),(0,r.kt)("li",null,"calls the DrawLineRenderer method which draws the line renderer from the rayVisualSource to the closestObject position if the shouldDrawLineRenderer is true"),(0,r.kt)("li",null,"calls the GrabCheck method which checks if the hand can grab the closestObject"),(0,r.kt)("br",null),(0,r.kt)("code",null,"virtual Collider[] ContactCheck()"),(0,r.kt)("li",null,"uses Unity's OverlapSphere method to check for colliders within the sphere, passing in the hand's position, the radius of the sphere, and the LayerMask for filtering the colliders"),(0,r.kt)("li",null,"stores the result of the check in the contactResult variable, which is an array of colliders that were hit by the sphere"),(0,r.kt)("li",null,"returns the contactResult variable; an array of colliders that were hit by the sphere"))))}h.isMDXComponent=!0}}]);