"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7158],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>f});var o=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,o)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,o,n=function(e,t){if(null==e)return{};var r,o,n={},a=Object.keys(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var c=o.createContext({}),s=function(e){var t=o.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},p=function(e){var t=s(e.components);return o.createElement(c.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var r=e.components,n=e.mdxType,a=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=s(r),d=n,f=u["".concat(c,".").concat(d)]||u[d]||m[d]||a;return r?o.createElement(f,l(l({ref:t},p),{},{components:r})):o.createElement(f,l({ref:t},p))}));function f(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=r.length,l=new Array(a);l[0]=d;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[u]="string"==typeof e?e:n,l[1]=i;for(var s=2;s<a;s++)l[s]=r[s];return o.createElement.apply(null,l)}return o.createElement.apply(null,r)}d.displayName="MDXCreateElement"},5744:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>s});var o=r(7462),n=(r(7294),r(3905));const a={sidebar_position:0},l="LocomotionSystem",i={unversionedId:"locomotion/scripting/locomotion-system",id:"locomotion/scripting/locomotion-system",title:"LocomotionSystem",description:"-\tUsed for checking if player is grounded. If it's not, screen will fade black and Footprints will appear on the place player has left the ground",source:"@site/docs/locomotion/scripting/locomotion-system.md",sourceDirName:"locomotion/scripting",slug:"/locomotion/scripting/locomotion-system",permalink:"/docs/locomotion/scripting/locomotion-system",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/locomotion/scripting/locomotion-system.md",tags:[],version:"current",sidebarPosition:0,frontMatter:{sidebar_position:0},sidebar:"tutorialSidebar",previous:{title:"Scripting",permalink:"/docs/category/scripting-3"},next:{title:"TeleportRayInteractor",permalink:"/docs/locomotion/scripting/teleport-ray-interactor"}},c={},s=[{value:"Public Properties",id:"public-properties",level:3},{value:"Public Methods",id:"public-methods",level:3}],p={toc:s};function u(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,o.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"locomotionsystem"},"LocomotionSystem"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Used for checking if player is grounded. If it's not, screen will fade black and Footprints will appear on the place player has left the ground"),(0,n.kt)("li",{parentName:"ul"},"Holds references to all objects essential for teleport and continuous locomotion to work"),(0,n.kt)("li",{parentName:"ul"},"Should be placed on input root (OVRCameraRig for Oculus).")),(0,n.kt)("h3",{id:"public-properties"},"Public Properties"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-jsx"},"Transform Transform\n")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Cached transform component")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-jsx"},"Transform TeleportRayStartLeft\n")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-jsx"},"Transform TeleportRayStartRight\n")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"TeleportRayStarts are created to help stabilize ray casting ")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-jsx"},"Transform CenterEyeAnchor\n")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-jsx"},"ScreenFader ScreenFader\n")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-jsx"},"TeleportDestination OldTeleportDestination\n")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Used to keep track of where player was and invoking events")),(0,n.kt)("h3",{id:"public-methods"},"Public Methods"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-jsx"},"bool TryGetGroundNormal(out Vector3 groundNormal)\n")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Returns true if the camera is above object containing Ground"),(0,n.kt)("li",{parentName:"ul"},"If player is not grounded, groundNormal is equal to Vector3.Zero")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-jsx"},"Vector3 GetGroundPoint()\n")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"returns point on the Ground where player is standing.")))}u.isMDXComponent=!0}}]);