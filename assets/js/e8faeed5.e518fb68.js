"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[992],{3905:(t,e,r)=>{r.d(e,{Zo:()=>p,kt:()=>m});var a=r(7294);function n(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function i(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,a)}return r}function u(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?i(Object(r),!0).forEach((function(e){n(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function o(t,e){if(null==t)return{};var r,a,n=function(t,e){if(null==t)return{};var r,a,n={},i=Object.keys(t);for(a=0;a<i.length;a++)r=i[a],e.indexOf(r)>=0||(n[r]=t[r]);return n}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(a=0;a<i.length;a++)r=i[a],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(t,r)&&(n[r]=t[r])}return n}var l=a.createContext({}),s=function(t){var e=a.useContext(l),r=e;return t&&(r="function"==typeof t?t(e):u(u({},e),t)),r},p=function(t){var e=s(t.components);return a.createElement(l.Provider,{value:e},t.children)},c="mdxType",d={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},v=a.forwardRef((function(t,e){var r=t.components,n=t.mdxType,i=t.originalType,l=t.parentName,p=o(t,["components","mdxType","originalType","parentName"]),c=s(r),v=n,m=c["".concat(l,".").concat(v)]||c[v]||d[v]||i;return r?a.createElement(m,u(u({ref:e},p),{},{components:r})):a.createElement(m,u({ref:e},p))}));function m(t,e){var r=arguments,n=e&&e.mdxType;if("string"==typeof t||n){var i=r.length,u=new Array(i);u[0]=v;var o={};for(var l in e)hasOwnProperty.call(e,l)&&(o[l]=e[l]);o.originalType=t,o[c]="string"==typeof t?t:n,u[1]=o;for(var s=2;s<i;s++)u[s]=r[s];return a.createElement.apply(null,u)}return a.createElement.apply(null,r)}v.displayName="MDXCreateElement"},9824:(t,e,r)=>{r.r(e),r.d(e,{assets:()=>l,contentTitle:()=>u,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>s});var a=r(7462),n=(r(7294),r(3905));const i={sidebar_position:7},u="Multi Source Input Data Provider",o={unversionedId:"input/multi-source-input-data-provider",id:"input/multi-source-input-data-provider",title:"Multi Source Input Data Provider",description:"-\tScript in OctoXR that inherits from InputDataProvider and serves as a switcher between multiple InputDataProviders",source:"@site/docs/input/multi-source-input-data-provider.md",sourceDirName:"input",slug:"/input/multi-source-input-data-provider",permalink:"/docs/input/multi-source-input-data-provider",draft:!1,tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"defaultSidebar",previous:{title:"Unity XR Controller Input Data Provider",permalink:"/docs/input/unity-xr-controller-input-data-provider"},next:{title:"Input Confidence Trigger",permalink:"/docs/input/input-confidence-trigger"}},l={},s=[{value:"Public properties",id:"public-properties",level:3},{value:"Protected methods",id:"protected-methods",level:3}],p={toc:s};function c(t){let{components:e,...r}=t;return(0,n.kt)("wrapper",(0,a.Z)({},p,r,{components:e,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"multi-source-input-data-provider"},"Multi Source Input Data Provider"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Script in OctoXR that inherits from InputDataProvider and serves as a switcher between multiple InputDataProviders"),(0,n.kt)("li",{parentName:"ul"},"It keeps a list of InputDataProviders and constantly checks for their tracking status, the first InputDataProvider in the list that is tracking its input source is taken as the current active provider - MultiSourceInputDataProvider provides the input data that is sourced from the active InputDataProvider as long as the current provider is tracking"),(0,n.kt)("li",{parentName:"ul"},"If the current active InputDataProvider stops tracking, MultiSourceInputDataProvider will then choose a new active provider from its list based on InputDataProviders' tracking status"),(0,n.kt)("li",{parentName:"ul"},"If no InputDataProvider that is tracking is found in the list, MultiSourceInputDataProvider will also have its tracking state disabled, i.e. IsTracking property of the MultiSourceInputDataProvider will be false, until the first InputDataProvider that starts tracking its input source is found in the list"),(0,n.kt)("li",{parentName:"ul"},"This script enables the possibility to switch between XR controller and hand tracking input; as soon as the controller tracking is lost, hand tracking can start (assuming the XR device in use supports hand tracking) and vice-versa")),(0,n.kt)("h3",{id:"public-properties"},"Public properties"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-jsx"},"InputDataProvider Current { get; }\n")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Input data provider that is current source of input data provided by the multi-source input data provider"),(0,n.kt)("li",{parentName:"ul"},"Null value means there is no InputDataProvider in the MultiSourceInputDataprovider's list of source input data providers that is currently tracking its input source"),(0,n.kt)("li",{parentName:"ul"},"This property is exposed in the Unity editor as a read-only property")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-jsx"},"HandType DefaultHandType { get; set; }\n")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Sidedness of the hand for which the MultiSourceInputDataProvider is providing input data by default")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-jsx"},"bool RunInFixedUpdate { get; set; }\n")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Specifies whether the MultiSourceInputDataProvider should run its logic in FixedUpdate instead of Update")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-jsx"},"List<InputDataProvider> SourceInputDataProviders { get; }\n")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"List of InputDataProviders the MultiSourceInputDataProvider uses as source if input data based on their current tracking status, i.e. MultiSourceInputDataProvider switches between them")),(0,n.kt)("h3",{id:"protected-methods"},"Protected methods"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-jsx"},"override void TrackingStart()\n")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Override of InputDataProvider's callback sent when tracking starts, ensures tracking status of MultiSourceInputDataProvider is consistent with the tracking status of its current active InputDataProvider used as source of input data")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-jsx"},"override void TrackingLost()\n")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Override of InputDataProvider's callback sent when tracking is lost, ensures tracking status of MultiSourceInputDataProvider is consistent with the tracking status of its current active InputDataProvider used as source of input data")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-jsx"},"override void OnValidate()\n")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Unity built-in callback, overrides base InputDataProvider's OnValidate method, ensures the state of MultiSourceInputDataProvider is valid")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-jsx"},"override void OnDisable()\n")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Unity built-in callback, handles disabling of MultiSourceInputDataProvider")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-jsx"},"virtual void Update()\n")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Unity built-in callback, executes the MultiSourceInputDataProvider's main logic, depending on the current play mode of Unity editor and the value set for RunInFixedUpdate")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-jsx"},"virtual void FixedUpdate()\n")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Unity built-in callback, executes the MultiSourceInputDataProvider's main logic, depending on the current play mode of Unity editor and the value set for RunInFixedUpdate")))}c.isMDXComponent=!0}}]);