"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6661],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>m});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),p=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},u=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=p(a),h=r,m=d["".concat(l,".").concat(h)]||d[h]||c[h]||i;return a?n.createElement(m,o(o({ref:t},u),{},{components:a})):n.createElement(m,o({ref:t},u))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:r,o[1]=s;for(var p=2;p<i;p++)o[p]=a[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}h.displayName="MDXCreateElement"},2162:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var n=a(7462),r=(a(7294),a(3905));const i={sidebar_position:4},o="Input Data Provider",s={unversionedId:"input/input-data-provider",id:"input/input-data-provider",title:"Input Data Provider",description:"- InputDataProvider is script that extends HandSkeletonPoseProvider with certain VR input specific functionalities and properties",source:"@site/docs/input/input-data-provider.md",sourceDirName:"input",slug:"/input/input-data-provider",permalink:"/docs/input/input-data-provider",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/input/input-data-provider.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Hand Skeleton Pose Provider",permalink:"/docs/input/hand-skeleton-pose-provider"},next:{title:"Hand Input Data Provider",permalink:"/docs/input/hand-input-data-provider"}},l={},p=[{value:"Public properties",id:"public-properties",level:3},{value:"Protected properties",id:"protected-properties",level:3},{value:"Protected methods",id:"protected-methods",level:3}],u={toc:p};function d(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"input-data-provider"},"Input Data Provider"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"InputDataProvider is script that extends HandSkeletonPoseProvider with certain VR input specific functionalities and properties"),(0,r.kt)("li",{parentName:"ul"},"It is an abstract class since it can't provide all the input handling functionality, therefore it is expected to be implemented by more specific input handling scripts"),(0,r.kt)("li",{parentName:"ul"},"InputDataProvider contains properties that are common to many VR input sources, but it does not manipulate some of those properties itself, it is expected from derived behaviours to set them as needed using InpuDataProvider's certain protected API"),(0,r.kt)("li",{parentName:"ul"},"This script executes both during edit- and run-time by default. This way changes that occur from manipulating certain properties on it can be immediately observed in Unity editor without the need to start the play mode")),(0,r.kt)("p",null,"In addition to properties and other members inherited from HandSkeletonPoseProvider, InputDataProvider defines:"),(0,r.kt)("h3",{id:"public-properties"},"Public properties"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"Transform InputRoot { get; set; }\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Transform that acts as a reference space for bone poses when they are being set by the InputDataProvider, i.e. it acts as if it was the parent to all bone poses, including root pose, when first obtained from any source. This property is defined in InputDataProvider, but it is up to behaviours that inherit from it to apply this transform as intended. It should act as an offset that is applied to the original bone poses obtained from a specific source from which the original poses are obtained (hand tracking API for example)"),(0,r.kt)("li",{parentName:"ul"},"This property is exposed in the InputDataProvider's inspector panel, it should be optional, but again, it is up to the behaviours that implement InputDataProvider to implement the desired behaviour and requirements")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"Transform RootPoseOffset { get; set; }\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Transform whose local position and local rotation specify the offset to apply to the final root pose provided by the InputDataProvider. This property is similar to the InputRoot, but the main difference is that the RootPoseOffset is applied at the end of root pose calculation, i.e. after the InputRoot is applied, and its local position and rotation is considered, not the world-space one"),(0,r.kt)("li",{parentName:"ul"},"This property is exposed in the InputDataProvider's inspector panel, it should be optional, but again, it is up to the behaviours that implement InputDataProvider to implement the desired behaviour and requirements")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"bool IsTracking { get; }\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Indicates whether the input source is tracked currently. Usually when dealing with VR input, input source can be tracked and tracking can be lost as well, e.g. hand tracking can be periodically unavailable, controller tracking too"),(0,r.kt)("li",{parentName:"ul"},"This property is also available in the inspector panel of the InputDataProvider. It can be checked/unchecked there, i.e. it is not read-only in the inspector, so the user gets the opportunity to try the effects of changing it in the editor with no need to enter play mode ")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"UnityEvent OnTrackingStart { get; }\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Event sent when input source tracking is (re-)established, i.e. any time IsTracking changes from false to true"),(0,r.kt)("li",{parentName:"ul"},"Visible in the inspector panel and sent in edit mode too")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"UnityEvent OnTrackingLost { get; }\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Event sent when input source tracking gets lost, i.e. any time IsTracking changes from true to false"),(0,r.kt)("li",{parentName:"ul"},"Visible in the inspector panel and sent in edit mode too")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"float Confidence { get; }\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"A ","[0, 1]"," ranged value that specifies confidence level of input source tracking. Some VR input sources can be at different levels of tracking confidence, this value describes how confident is tracking, 0 being not confident at all and 1 being maximum level of confidence. This value is always 0 if IsTracking is false"),(0,r.kt)("li",{parentName:"ul"},"Like IsTracking, this property is visible in the inspector panel and it can be changed there to observe the effects in edit mode, but only if IsTracking is true")),(0,r.kt)("h3",{id:"protected-properties"},"Protected properties"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"float Confidence { set; }\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Protected setter of the previously described Confidence property, derived behaviours should set the confidence level of their input sources using this. Value being set is always clamped to ","[0, 1]"," range. Nothing is set if IsTracking is false - as mentioned, confidence level is always zero in that case")),(0,r.kt)("h3",{id:"protected-methods"},"Protected methods"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"void SetIsTracking(bool isTracking)\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Method for derived behaviours to use when input source tracking state needs to be updated. This method will handle all the tracking related events sending along with other callbacks described below. It has no effect if the InputDataProvider is not active and enabled")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"Pose GetRootPose(Pose baseRootPose)\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Calculates the final root pose from the base pose specified by the 'baseRootPose' parameter"),(0,r.kt)("li",{parentName:"ul"},"This method can be used by derived behaviours in order to calculate the final root pose to provide, InputRoot and RootPoseOffset will be applied to the initial root pose as intended using this method")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"virtual void InputRootChanged(Transform previousRoot)\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Method used as callback only, for derived behaviours to override should they have a need to handle InputRoot Transform being changed. Previous Transform that was used as input root is sent as argument")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"virtual void TrackingStart()\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Callback sent under same circumstances as the OnTrackingStart event, but this is called by the InputDataProvider just before the event is sent in case deriving classes need to handle tracking state change before any of the other potential subscribers of the OnTrackingStart event get the chance to do so as well")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"virtual void TrackingLost()\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Same as the TrackingStart, but goes in tandem with the OnTrackingLost event and circumstances")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"virtual void OnValidate()\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Unity built-in callback, keeps the state of InputDataProvider valid"),(0,r.kt)("li",{parentName:"ul"},"If overridden by a derived class, base.OnValidate should always be called")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"virtual void OnDisable()\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Unity built-in callback, sets the IsTracking to false. Basically this ensures that tracking is always considered absent as long as the InputDataProvider is disabled and/or inactive"),(0,r.kt)("li",{parentName:"ul"},"If overridden by a derived class, base.OnDisable should always be called due to the intended behaviour of the InputDataProvider")))}d.isMDXComponent=!0}}]);