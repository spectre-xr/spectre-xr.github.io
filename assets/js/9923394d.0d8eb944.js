"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3442],{3905:(e,t,o)=>{o.d(t,{Zo:()=>p,kt:()=>m});var s=o(7294);function n(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function a(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,s)}return o}function r(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?a(Object(o),!0).forEach((function(t){n(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):a(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function i(e,t){if(null==e)return{};var o,s,n=function(e,t){if(null==e)return{};var o,s,n={},a=Object.keys(e);for(s=0;s<a.length;s++)o=a[s],t.indexOf(o)>=0||(n[o]=e[o]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(s=0;s<a.length;s++)o=a[s],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(n[o]=e[o])}return n}var l=s.createContext({}),d=function(e){var t=s.useContext(l),o=t;return e&&(o="function"==typeof e?e(t):r(r({},t),e)),o},p=function(e){var t=d(e.components);return s.createElement(l.Provider,{value:t},e.children)},h="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return s.createElement(s.Fragment,{},t)}},u=s.forwardRef((function(e,t){var o=e.components,n=e.mdxType,a=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),h=d(o),u=n,m=h["".concat(l,".").concat(u)]||h[u]||c[u]||a;return o?s.createElement(m,r(r({ref:t},p),{},{components:o})):s.createElement(m,r({ref:t},p))}));function m(e,t){var o=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=o.length,r=new Array(a);r[0]=u;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[h]="string"==typeof e?e:n,r[1]=i;for(var d=2;d<a;d++)r[d]=o[d];return s.createElement.apply(null,r)}return s.createElement.apply(null,o)}u.displayName="MDXCreateElement"},4780:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>d});var s=o(7462),n=(o(7294),o(3905));const a={sidebar_position:3},r="Hand Skeleton Pose Provider",i={unversionedId:"input/hand-skeleton-pose-provider",id:"input/hand-skeleton-pose-provider",title:"Hand Skeleton Pose Provider",description:"-\tScript that serves the purpose of providing poses (positions and rotations) of the hand bones. Poses are most likely to come from a hand tracking source, but they can in theory come from any backing source - it is up to the behaviours that inherit from HandSkeletonPoseProvider to calculate or read hand poses however and from what ever source they choose to",source:"@site/docs/input/hand-skeleton-pose-provider.md",sourceDirName:"input",slug:"/input/hand-skeleton-pose-provider",permalink:"/docs/input/hand-skeleton-pose-provider",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"defaultSidebar",previous:{title:"Hand Skeleton Configuration",permalink:"/docs/input/hand-skeleton-configuration"},next:{title:"Input Data Provider",permalink:"/docs/input/input-data-provider"}},l={},d=[{value:"Public properties",id:"public-properties",level:3},{value:"Public methods",id:"public-methods",level:3},{value:"Protected properties",id:"protected-properties",level:3},{value:"Protected methods",id:"protected-methods",level:3},{value:"Additional notes",id:"additional-notes",level:3},{value:"Hand Skeleton Sourced Pose Provider",id:"hand-skeleton-sourced-pose-provider",level:3},{value:"Hand Skeleton Pose Filter",id:"hand-skeleton-pose-filter",level:3}],p={toc:d};function h(e){let{components:t,...o}=e;return(0,n.kt)("wrapper",(0,s.Z)({},p,o,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"hand-skeleton-pose-provider"},"Hand Skeleton Pose Provider"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Script that serves the purpose of providing poses (positions and rotations) of the hand bones. Poses are most likely to come from a hand tracking source, but they can in theory come from any backing source - it is up to the behaviours that inherit from HandSkeletonPoseProvider to calculate or read hand poses however and from what ever source they choose to"),(0,n.kt)("li",{parentName:"ul"},"This is an abstract class, it is mostly implemented by more specific input data providing scripts, but there are other uses derived from it"),(0,n.kt)("li",{parentName:"ul"},"In addition to hand pose it provides the hand scale as well. This scale is usually read from a hand tracking backend and can be used to scale the user's hand in virtual environment to best approximate the size of the user's virtual hand to match with the size of the real one. Again, this isn't something implemented in the HandSkeletonPoseProvider, but rather it is up to the derived behaviours to determine scale"),(0,n.kt)("li",{parentName:"ul"},"HandSkeletonPoseProvider is meant to provide poses for one hand - one pose provider provides poses of hand bones that belong to one particular hand, left or right "),(0,n.kt)("li",{parentName:"ul"},"Logic contained in this script mostly revolves around transforming hand bone poses from local space to world space (relative poses to absolute poses) and/or vice-versa, inheriting behaviours can use certain members detailed below to set absolute or relative bone poses and the hand scale as they see fit")),(0,n.kt)("h3",{id:"public-properties"},"Public properties"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-jsx"},"float Scale { get; }\n")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Scale of the target hand. This property is also exposed in the inspector of the pose provider inside Unity editor and it can be assigned there, but this is mostly for trying out different scales and observe the effect of changing it in the editor as the value of scale is usually set by scripts derived from pose provider")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-jsx"},"UnityEvent OnPoseDataUpdated { get; }\n")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Event sent whenever hand poses get updated using one of the methods described bellow. Visible in the inspector window as well")),(0,n.kt)("h3",{id:"public-methods"},"Public methods"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-jsx"},"abstract HandType GetHandType()\n")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"This method is used to determine for which hand does the pose provider provide poses, left or right")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-jsx"},"HandBoneKeyedReadOnlyCollection<Pose> GetBoneRelativePoses()\n")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Returns a read-only collection indexed by zero-based integer or a HandBoneId that contains relative poses for bones at the corresponding indices. Every bone pose in this list is relative to the bone's parent bone pose. In case of the WristRoot bone (index 0), pose is specified relative to world, i.e. it is an absolute bone pose")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-jsx"},"HandBoneKeyedReadOnlyCollection<Pose> GetBoneAbsolutePoses()\n")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Returns a read-only collection indexed by zero-based integer or a HandBoneId that contains absolute poses for bones at the corresponding indices - every bone pose in this list is specified in world space")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-jsx"},"HandBoneKeyedReadOnlyCollection<Pose> GetBoneAbsoluteScaledPoses()\n")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"This essentially is the same as GetBoneAbsolutePoses, but bone positions are scaled by the Scale of the pose provider. Bone positions are scaled with the position of the root bone (WristRoot) used as the origin of the scale, therefore WristRoot has the same position in this list as it does in both lists returned from GetBoneRelativePoses and GetBoneAbsolutePoses methods")),(0,n.kt)("h3",{id:"protected-properties"},"Protected properties"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-jsx"},"float Scale { set; }\n")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Property setter of the previously described Scale property, derived scripts can set the scale to provide using this")),(0,n.kt)("h3",{id:"protected-methods"},"Protected methods"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-jsx"},"void SetBoneRelativePoses(IReadOnlyList<Pose> poses)\n")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Method that should be called by the derived classes in order to set the relative bone poses. The list of bone poses passed as argument should contain at least 21 Pose objects, one for every bone in a hand skeleton, an exception is thrown if otherwise. This method, when completed successfully, sends out the OnPoseDataUpdated event")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-jsx"},"void SetBoneAbsolutePoses(IReadOnlyList<Pose> poses)\n")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Has completely the same effect as SetBoneRelativePoses, with the obvious exception that this method sets the absolute bone poses directly and relative poses are calculated based on these")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-jsx"},"virtual void OnGetBonePoses()\n")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"This method serves as callback for derived behaviours - by overriding it, the derived behaviours can perform their own custom logic and changes on poses just before the HandSkeletonPoseProvider calculates and returns the requested bone poses. This method gets called from GetBoneRelativePoses, GetBoneAbsolutePoses and GetBoneAbsoluteScaledPoses methods, i.e. whenever some code wants to obtain current hand bone poses")),(0,n.kt)("h3",{id:"additional-notes"},"Additional notes"),(0,n.kt)("p",null,"It should be noted that the HandSkeletonPoseProvider calculates poses in a deferred fashion. To better explain - calling SetBoneRelativePoses/SetBoneAbsolutePoses will not immediately recalculate bone absolute/scaled/relative poses. These methods just copy the provided poses to the corresponding lists. Only when one of the GetBone(Relative/Absolute/Scaled)Poses methods get called are the corresponding bone poses calculated. This way pose provider avoids redundant pose calculation in case poses get set multiple times before any of the methods for getting them are called, as all the calculations are deferred until poses are actually needed. This also has the side-effect in that the SetBoneRelativePoses and SetBoneAbsolutePoses mutually override each other: calling the latter will overwrite relative bone poses set by the former and vice-versa."),(0,n.kt)("p",null,"Behaviours that derive from HandSkeletonPoseProvider can for example override OnGetBonePoses method in order to obtain pose data from their sources, process it as they see fit and then set those poses and scale to the base pose provider using either SetBoneRelativePoses or SetBoneAbsolutePoses method. HandSkeletonPoseFilter and HandSkeletonSourcedPoseProvider scripts provide good examples of this kind of pattern for implementing HandSkeletonPoseProvider behaviour\n\u200b"),(0,n.kt)("h3",{id:"hand-skeleton-sourced-pose-provider"},"Hand Skeleton Sourced Pose Provider"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Special type of HandSkeletonPoseProvider that works with a HandSkeleton which is required to be attached to the same GameObject that the pose provider is attached to"),(0,n.kt)("li",{parentName:"ul"},"It reads the poses from the associated HandSkeleton and provides those poses to other behaviours that use it as the source for hand poses - other HandSkeletons mostly"),(0,n.kt)("li",{parentName:"ul"},"Since the HandSkeleton does not have to have all the possible unique HandBones attached, it has certain requirements - the associated HandSkeleton must have its own pose provider assigned, otherwise the HandSkeleton must be complete, i.e. have all 21 bones attached. If this is not met then the HandSkeletonSourcedPoseProvider will basically act as if it was disabled, since it won't be able to extrapolate poses for the bones which are not present in the associated HandSkeleton"),(0,n.kt)("li",{parentName:"ul"},"Using this pose provider enables the possibility of chaining HandSkeletons, one serving as the source of poses for the next one"),(0,n.kt)("li",{parentName:"ul"},"To provide the concrete example for this, you can have one HandSkeleton which uses certain InputDataProvider that provides it with hand poses which are read from some input source. Then you can have another HandSkeleton, for example one of the VisualizedHandSkeletons that you want to use to visualize the first HandSkeleton with. In that case you would probably want to attach HandSkeletonSourcedPoseProvider to the first HandSkeleton and then assign that pose provider to the VisualizedHandSkeleton. That way VisualizedHandSkeleton will always have its pose exactly matched with the source HandSkeleton")),(0,n.kt)("h3",{id:"hand-skeleton-pose-filter"},"Hand Skeleton Pose Filter"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Another special type of HandSkeletonPoseProvider, it can be used as a filter for bone poses obtained from one pose provider that the HandSkeletonPoseFilter processes/filters in certain way and then those filtered poses can be provided to other behaviours that need to read hand poses"),(0,n.kt)("li",{parentName:"ul"},"It defines SourcePoseProvider property that accepts a HandSkeletonPoseProvider reference. This pose provider will act as a source of hand poses that get read by the pose filter and at later point processed by it. Since the pose filter is itself a HandSkeletonPoseProvider, it can be assigned to any other behaviour that needs to read hand poses"),(0,n.kt)("li",{parentName:"ul"},"If no SourcePoseProvider is assigned then nothing is performed and poses that will be provided are the same as those provided by the pose filter the last time it was requested to provide. The same behaviour also occurs if the HandSkeletonPoseFilter is inactive (its GameObject is inactive)"),(0,n.kt)("li",{parentName:"ul"},"If the HandSkeletonPoseFilter component is disabled then the source bone poses will not be processed and they will simply be provided as they are provided by the source pose provider, i.e. they will just pass through the filter unchanged"),(0,n.kt)("li",{parentName:"ul"},"This is an abstract class and it requires that the method for processing source poses be implemented by derived classes - GetFilteredBoneRelativePoses. This method is called by the base pose filter whenever it gets requested to provide bone poses. Implementing methods are passed collection of bone poses to which they can write the filtered poses which are expected to be specified relative to their parent bone poses (except for the WristRoot pose which is assumed to be in world space)"),(0,n.kt)("li",{parentName:"ul"},"HandSkeletonPoseFilters can be chained - one can be the source pose provider for the next one, so multiple independent pose filters can all process an original bone poses obtained from an input source one after the other before they are finally provided to a HandSkeleton, for example")))}h.isMDXComponent=!0}}]);